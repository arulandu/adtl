iterNat : (A : Type 0) -> A -> (A -> A) -> Nat -> A.
iterNat := fun A : Type 0 => fun z : A => fun s : A -> A => fun n : Nat => 
  elimNat (fun p : Nat => A) z (fun p : Nat => s) n.

add : (x : Nat) -> (y : Nat) -> Nat.
add := fun x : Nat => fun y : Nat => iterNat Nat y (fun z : Nat => succ z) x.

mult : (x : Nat) -> (y : Nat) -> Nat.
mult := fun x : Nat => fun y : Nat => iterNat Nat y (fun z : Nat => add z x) x.

one := succ 0.
two := succ one.
three := succ two.

sum := add two three.
prod := mult two three.

Context.
Eval sum.
Eval prod.
